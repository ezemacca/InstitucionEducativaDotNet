@page "/verEstudiantes"

<PageTitle>VerEstudiantes</PageTitle>
@inject GetEstudiantesAunCursandoUseCase GetEstudiantesAunCursandoUseCase
@inject GetEstudiantesConUnCursoFinalizadoUseCase GetEstudiantesConUnCursoFinalizadoUseCase
@inject AgregarEstudianteUseCase AgregarEstudianteUseCase
@inject EliminarEstudianteUseCase EliminarEstudianteUseCase
@inject GetEstudiantesUseCase GetEstudiantesUseCase
@inject GetEstudianteUseCase GetEstudianteUseCase
@inject NavigationManager Navegador
@inject IJSRuntime JsRuntime



<h1>Estudiantes: </h1>
<br><br>
 <div class="btn-group btn-group-toggle" data-toggle="buttons">
    <label class="btn btn-secondary">
        <input @onclick="()=>verTodos()" type="radio" name="options" id="option1" autocomplete="off" > Ver Todos
    </label>
    <label class="btn btn-secondary">
        <input @onclick="()=>verEstudiantesAunCursando()" type="radio" name="options" id="option2" autocomplete="off">  Ver estudiantes aun cursando
    </label>
    <label class="btn btn-secondary">
        <input @onclick="()=>verEstudiantesConCursoFinalizado()" type="radio" name="options" id="option3" autocomplete="off"> estudiantes con cursos finalizados
    </label>
</div>
    <button id="btn-" class="btn btn-success" @onclick="()=>agregarEstudiante()" > Agregar Nuevo Estudiante</button>
        <table class="table">
             <thead>
                <tr>
                    
                    <th>Nombre</th>
                    <th>Apellido</th>
                    
                    @if(!_mostrar_curso)
                    {
                    <th>DNI</th>
                    <th>Mail</th>
                    <th>Acciones</th>
                    }
                    else
                    {
                    <th>Curso</th>
                    }
                </tr>
        </thead>
        <tbody>
             @foreach (var Estudiante in _estudiantes)
             { 
                <tr>
                    
                    <td>@Estudiante.Nombre</td>
                    <td>@Estudiante.Apellido</td>
                   
                     
                    @if(!_mostrar_curso)
                    {
                        <td>@Estudiante.DNI</td>
                        <td>@Estudiante.Mail</td> 
                        <td>
                            <button class="btn btn-primary btn-xs" @onclick="()=>verCursosDelEstudiante(Estudiante.Id)"> Ver cursos </button>
                            <button class="btn btn-info btn-xs"  @onclick="()=>modificarEstudiante(Estudiante.Id)">Modificar Estudiante</button>
                            <button class="btn btn-danger btn-xs"  @onclick="()=>eliminarEstudiante(Estudiante.Id)" >Eliminar Estudiante</button>
                        </td> 
                    }
                    else
                    {
                        <td>
                        @foreach (var inscripcion in @Estudiante?.Inscripciones)
                        {
                            @inscripcion?.Curso?.Titulo                        
                        }
                        </td>
                     }
                </tr>
            } 
        </tbody>
    </table>

@code{

    
    List<Estudiante> _estudiantes = new List<Estudiante>();
    bool _mostrar_curso=false;
     protected override void OnInitialized()
    {     
        _estudiantes = GetEstudiantesUseCase.Ejecutar();
    }
    void verCursosDelEstudiante(int id_estudiante){
        
        Navegador.NavigateTo($"verCursosEstudiante/{id_estudiante}");

    }

    void agregarEstudiante(){
        Navegador.NavigateTo($"agregarEstudiante");
        
    }

    void modificarEstudiante(int Id){
        Navegador.NavigateTo($"modificarEstudiante/{Id}");
    }

    async Task eliminarEstudiante(int id)
    {
        var _estudianteSeleccionado= GetEstudianteUseCase.Ejecutar(id);
        if(_estudianteSeleccionado != null)
        {
            bool confirmado= await JsRuntime.InvokeAsync<bool>("confirm",$"Esta seguro que desea borrar el estudiante con id {_estudianteSeleccionado.Id}?");
            if(confirmado)
            {
                EliminarEstudianteUseCase.Ejecutar(id);
                _estudiantes= GetEstudiantesUseCase.Ejecutar();
            }
        }
    }

    void verTodos(){
         _estudiantes = GetEstudiantesUseCase.Ejecutar();
         _mostrar_curso=false;
    }
    void verEstudiantesAunCursando(){
        _estudiantes=GetEstudiantesAunCursandoUseCase.Ejecutar();
        _mostrar_curso=true;
    }
    void verEstudiantesConCursoFinalizado(){
        _estudiantes=GetEstudiantesConUnCursoFinalizadoUseCase.Ejecutar();
        _mostrar_curso=true;
    }
    
}
