@page "/verCursos"

<PageTitle>VerCursos</PageTitle>

@inject GetCursoUseCase GetCursoUseCase
@inject GetCursosUseCase GetCursosUseCase
@inject EliminarCursoUseCase EliminarCursoUseCase
@inject NavigationManager Navegador
@inject IJSRuntime JsRuntime



<h1>Cursos: </h1>

<button class="btn btn-success" @onclick="()=>agregarCurso()"> Agregar Nuevo Curso</button>

<table class="table">
        <thead>
            <tr>
                <th>Titulo</th>
                <th>Descripcion</th>
                <th>FechaInicio</th>
                <th>FechaFin</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var curso in _cursos)
             { 
                <tr>
                     <td>@curso.Titulo</td>
                    <td>@curso.Descripcion</td>
                    <td>@curso.FechaInicio</td>
                    <td>@curso.FechaFin</td> 
                    <td>
                        @* <button class="btn btn-primary" >Ver Curso </button> *@
                        <button class="btn btn-primary" @onclick="()=>verEstudiantesInscriptos(curso.Id)" >Ver Estudiantes</button>
                        <button class="btn btn-info" @onclick="()=>modificarCurso(curso.Id)"  >Modificar Curso</button>
                        <button class="btn btn-danger" @onclick="()=>eliminarCurso(curso.Id)">Eliminar Curso</button>
                    </td> 
                </tr>

                @* DENTRO DE LOS BOTONES *@
                @* @onclick="()=>EliminarCurso(curso.id)" *@
            } 
        </tbody>
    </table>

@code{

    List<Curso>? _cursos = new List<Curso>();
    bool _curso_eliminado=false;
    protected override void OnInitialized()
    {     
        _cursos = GetCursosUseCase.Ejecutar();
    }
    void verEstudiantesInscriptos(int Id_curso){
        Navegador.NavigateTo($"verEstudiantesInscriptos/{Id_curso}");
    }
    void agregarCurso(){
        Navegador.NavigateTo($"agregarCurso");
    }
    void modificarCurso(int Id){
        Navegador.NavigateTo($"modificarCurso/{Id}");
    }

    async Task eliminarCurso(int id)
    {
        var _cursoSeleccionado= GetCursoUseCase.Ejecutar(id);
        if(_cursoSeleccionado != null)
        {
            bool confirmado= await JsRuntime.InvokeAsync<bool>("confirm",$"Esta seguro que desea borrar el curso {_cursoSeleccionado.Titulo}?");
            if(confirmado)
            {
                EliminarCursoUseCase.Ejecutar(id);
                _curso_eliminado= true;
                _cursos= GetCursosUseCase.Ejecutar();              
            }
        }

    }
}